<?xml version="1.0" encoding="utf-8" standalone="no"?>
<problem revision="35" short-name="pair-of-nonintersected-intervals" url="https://polygon.codeforces.com/p/Temirulan/pair-of-nonintersected-intervals">
    <names>
        <name language="kazakh" value="Temirulan vs Pernekhan"/>
        <name language="russian" value="Temirulan vs Pernekhan"/>
    </names>
    <statements>
        <statement charset="UTF-8" language="kazakh" path="statements/kazakh/problem.tex" type="application/x-tex"/>
        <statement language="kazakh" path="statements/.pdf/kazakh/problem.pdf" type="application/pdf"/>
        <statement charset="UTF-8" language="russian" path="statements/russian/problem.tex" type="application/x-tex"/>
        <statement language="russian" path="statements/.pdf/russian/problem.pdf" type="application/pdf"/>
    </statements>
    <judging cpu-name="Intel(R) Core(TM) i5-3470 CPU @ 3.20GHz" cpu-speed="3600" input-file="C.in" output-file="C.out">
        <testset name="tests">
            <time-limit>500</time-limit>
            <memory-limit>268435456</memory-limit>
            <test-count>40</test-count>
            <input-path-pattern>tests/%02d</input-path-pattern>
            <answer-path-pattern>tests/%02d.a</answer-path-pattern>
            <tests>
                <test method="manual" sample="true"/>
                <test method="manual" sample="true"/>
                <test method="manual" sample="true"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
                <test method="manual"/>
            </tests>
        </testset>
    </judging>
    <files>
        <resources>
            <file path="files/olymp.sty"/>
            <file path="files/problem.tex"/>
            <file path="files/statements.ftl"/>
            <file path="files/testlib.h" type="h.g++"/>
        </resources>
        <attachments>
            <file path="files/cms_conf.py" type="python.2"/>
        </attachments>
        <executables>
            <executable>
                <source path="files/gen.cpp" type="cpp.g++"/>
                <binary path="files/gen.exe" type="exe.win32"/>
            </executable>
            <executable>
                <source path="files/validator.cpp" type="cpp.g++"/>
                <binary path="files/validator.exe" type="exe.win32"/>
            </executable>
        </executables>
    </files>
    <assets>
        <checker name="std::hcmp.cpp" type="testlib">
            <source path="files/check.cpp" type="cpp.g++"/>
            <binary path="check.exe" type="exe.win32"/>
            <copy path="check.cpp"/>
            <testset>
                <test-count>1</test-count>
                <input-path-pattern>files/tests/checker-tests/%02d</input-path-pattern>
                <output-path-pattern>files/tests/checker-tests/%02d.o</output-path-pattern>
                <answer-path-pattern>files/tests/checker-tests/%02d.a</answer-path-pattern>
                <tests>
                    <test verdict="ok"/>
                </tests>
            </testset>
        </checker>
        <validators>
            <validator>
                <source path="files/validator.cpp" type="cpp.g++"/>
                <binary path="files/validator.exe" type="exe.win32"/>
                <testset>
                    <test-count>0</test-count>
                    <input-path-pattern>files/tests/validator-tests/%02d</input-path-pattern>
                    <tests/>
                </testset>
            </validator>
        </validators>
        <solutions>
            <solution tag="accepted">
                <source path="solutions/sol-adilet-temirulan.cpp" type="cpp.g++"/>
                <binary path="solutions/sol-adilet-temirulan.exe" type="exe.win32"/>
            </solution>
            <solution tag="wrong-answer">
                <source path="solutions/sol-adilet-wa.cpp" type="cpp.g++"/>
                <binary path="solutions/sol-adilet-wa.exe" type="exe.win32"/>
            </solution>
            <solution tag="time-limit-exceeded">
                <source path="solutions/sol1000.cpp" type="cpp.g++"/>
                <binary path="solutions/sol1000.exe" type="exe.win32"/>
            </solution>
            <solution tag="time-limit-exceeded">
                <source path="solutions/sol50.cpp" type="cpp.g++"/>
                <binary path="solutions/sol50.exe" type="exe.win32"/>
            </solution>
            <solution tag="time-limit-exceeded">
                <source path="solutions/sol500.cpp" type="cpp.g++"/>
                <binary path="solutions/sol500.exe" type="exe.win32"/>
            </solution>
            <solution tag="main">
                <source path="solutions/sol5000.cpp" type="cpp.g++"/>
                <binary path="solutions/sol5000.exe" type="exe.win32"/>
            </solution>
            <solution tag="time-limit-exceeded">
                <source path="solutions/stupid_n5.cpp" type="cpp.g++"/>
                <binary path="solutions/stupid_n5.exe" type="exe.win32"/>
            </solution>
            <solution tag="time-limit-exceeded">
                <source path="solutions/stupid_n6.cpp" type="cpp.g++"/>
                <binary path="solutions/stupid_n6.exe" type="exe.win32"/>
            </solution>
        </solutions>
    </assets>
    <properties>
        <property name="tests-wellformed" value="false"/>
    </properties>
    <stresses>
        <stress-count>3</stress-count>
        <stress-path-pattern>stresses/%03d</stress-path-pattern>
        <list>
            <stress index="3" path="stresses/003"/>
            <stress index="2" path="stresses/002"/>
            <stress index="1" path="stresses/001"/>
        </list>
    </stresses>
    <documents>
        <document path="documents/description.txt" type="text/plain"/>
    </documents>
    <tags>
        <tag value="counting"/>
        <tag value="data structures"/>
        <tag value="two pointers"/>
    </tags>
</problem>
